name: Deploy to Production (Development Version)

on:
  push:
    branches: [ prod ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production

env:
  DEPLOY_PATH: /var/www/html

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check deployment readiness
        run: |
          echo "üîç Verificando pr√©-requisitos para deploy..."
          
          # Verificar se os secrets est√£o configurados
          if [ -z "${{ secrets.HOST }}" ]; then
            echo "‚ö†Ô∏è  SECRET 'HOST' n√£o configurado"
            echo "üìù Configure em: Settings ‚Üí Secrets and variables ‚Üí Actions"
            MISSING_SECRETS=true
          fi
          
          if [ -z "${{ secrets.USERNAME }}" ]; then
            echo "‚ö†Ô∏è  SECRET 'USERNAME' n√£o configurado"
            MISSING_SECRETS=true
          fi
          
          if [ -z "${{ secrets.KEY }}" ]; then
            echo "‚ö†Ô∏è  SECRET 'KEY' n√£o configurado"
            MISSING_SECRETS=true
          fi
          
          if [ "$MISSING_SECRETS" = "true" ]; then
            echo ""
            echo "‚ùå Deploy cancelado - Secrets n√£o configurados"
            echo ""
            echo "üìã Para configurar os secrets necess√°rios:"
            echo "1. V√° para Settings ‚Üí Secrets and variables ‚Üí Actions"
            echo "2. Adicione os seguintes secrets:"
            echo "   - HOST: endere√ßo do servidor (ex: meuservidor.com)"
            echo "   - USERNAME: usu√°rio SSH (ex: ubuntu)"
            echo "   - KEY: chave privada SSH completa"
            echo "   - PORT: porta SSH (opcional, padr√£o: 22)"
            exit 1
          fi
          
          echo "‚úÖ Todos os secrets est√£o configurados"
          
      - name: Simulate deployment steps
        run: |
          echo "üöÄ Simulando deploy..."
          echo "üìÅ Diret√≥rio de deploy: ${{ env.DEPLOY_PATH }}"
          echo "üéØ Branch: ${{ github.ref_name }}"
          echo "üìù Commit: ${{ github.sha }}"
          echo ""
          echo "Etapas que ser√£o executadas:"
          echo "1. ‚úÖ Conectar via SSH"
          echo "2. ‚úÖ Criar backup"
          echo "3. ‚úÖ Atualizar c√≥digo (git pull)"
          echo "4. ‚úÖ Instalar depend√™ncias (composer)"
          echo "5. ‚úÖ Limpar cache"
          echo ""
          echo "üéâ Deploy simulado com sucesso!"
          
      - name: Deploy to Server (Only if secrets are configured)
        if: secrets.HOST != '' && secrets.USERNAME != '' && secrets.KEY != ''
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT || 22 }}
          script: |
            cd ${{ env.DEPLOY_PATH }}
            
            # Verificar o status atual
            echo "=== Status do Git ==="
            git status
            
            # Fazer backup antes do deploy
            echo "=== Criando backup ==="
            cp -r . ../backup_$(date +%Y%m%d_%H%M%S) || true
            
            # Atualizar c√≥digo
            echo "=== Atualizando c√≥digo ==="
            git fetch origin prod
            git reset --hard origin/prod
            
            # Verificar se h√° depend√™ncias para atualizar
            if [ -f "composer.json" ]; then
              echo "=== Atualizando depend√™ncias do Composer ==="
              composer install --no-dev --optimize-autoloader
            fi
            
            # Limpar cache se necess√°rio
            echo "=== Limpando cache ==="
            find . -name "*.cache" -delete || true
            
            echo "=== Deploy conclu√≠do com sucesso ==="