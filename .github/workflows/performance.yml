name: Performance Monitoring

on:
  push:
    branches: [ main, prod ]
  schedule:
    # Run performance tests every day at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of performance test to run'
        required: true
        default: 'basic'
        type: choice
        options:
        - basic
        - full
        - load

env:
  PHP_VERSION: '8.3'

jobs:
  performance-audit:
    name: Performance Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json, opcache
        tools: composer:v2
        
    - name: Install dependencies
      run: composer install --prefer-dist --no-dev --optimize-autoloader
      
    - name: Enable OPCache for testing
      run: |
        echo "opcache.enable=1" >> $PHP_INI_DIR/conf.d/opcache.ini
        echo "opcache.enable_cli=1" >> $PHP_INI_DIR/conf.d/opcache.ini
        echo "opcache.memory_consumption=256" >> $PHP_INI_DIR/conf.d/opcache.ini
        
    - name: Analyze file sizes and complexity
      run: |
        echo "# Performance Report" > performance-report.md
        echo "Generated on: $(date)" >> performance-report.md
        echo "" >> performance-report.md
        
        echo "## File Size Analysis" >> performance-report.md
        echo "| File | Size | Lines |" >> performance-report.md
        echo "|------|------|-------|" >> performance-report.md
        
        find public/ -name "*.php" -type f -exec wc -cl {} + | sort -nr | head -20 | \
        while read lines chars file; do
          size=$(numfmt --to=iec $chars)
          echo "| $file | $size | $lines |" >> performance-report.md
        done
        
        echo "" >> performance-report.md
        echo "## Largest Files (>50KB)" >> performance-report.md
        find public/ -name "*.php" -type f -size +50k -exec ls -lh {} + | \
        awk '{print "- " $9 " (" $5 ")"}' >> performance-report.md || echo "No large files found" >> performance-report.md
        
    - name: Check for performance bottlenecks
      run: |
        echo "" >> performance-report.md
        echo "## Potential Performance Issues" >> performance-report.md
        
        # Check for potential issues
        echo "### Database Queries in Loops" >> performance-report.md
        grep -r "SELECT.*FROM.*WHERE" public/ --include="*.php" | \
        grep -E "(for|while|foreach)" | head -10 | \
        sed 's/^/- /' >> performance-report.md || echo "No obvious issues found" >> performance-report.md
        
        echo "" >> performance-report.md
        echo "### Large Array Operations" >> performance-report.md
        grep -r "array_.*(" public/ --include="*.php" | \
        grep -E "(array_map|array_filter|array_walk)" | head -10 | \
        sed 's/^/- /' >> performance-report.md || echo "No large array operations found" >> performance-report.md
        
    - name: Memory usage analysis
      run: |
        echo "" >> performance-report.md
        echo "## Memory Usage Analysis" >> performance-report.md
        
        # Simple memory test
        php -r "
        \$start = memory_get_usage();
        include 'vendor/autoload.php';
        \$end = memory_get_usage();
        \$peak = memory_get_peak_usage();
        echo '- Autoloader memory: ' . number_format(\$end - \$start) . ' bytes' . PHP_EOL;
        echo '- Peak memory usage: ' . number_format(\$peak) . ' bytes' . PHP_EOL;
        " >> performance-report.md
        
    - name: Check for optimizations
      run: |
        echo "" >> performance-report.md
        echo "## Optimization Suggestions" >> performance-report.md
        
        # Check for common optimization opportunities
        if [ ! -f ".htaccess" ]; then
          echo "- ⚠️ No .htaccess file found for Apache optimizations" >> performance-report.md
        fi
        
        if ! grep -q "opcache" composer.json; then
          echo "- 💡 Consider enabling OPCache in production" >> performance-report.md
        fi
        
        # Check for large media files
        large_files=$(find public/ -type f \( -name "*.jpg" -o -name "*.png" -o -name "*.gif" \) -size +1M | wc -l)
        if [ $large_files -gt 0 ]; then
          echo "- ⚠️ Found $large_files large media files (>1MB)" >> performance-report.md
        fi
        
        # Check for uncompressed assets
        if [ -d "public/CSS" ] && ! find public/CSS -name "*.min.css" | grep -q .; then
          echo "- 💡 Consider minifying CSS files" >> performance-report.md
        fi
        
        if [ -d "public/JS" ] && ! find public/JS -name "*.min.js" | grep -q .; then
          echo "- 💡 Consider minifying JavaScript files" >> performance-report.md
        fi
        
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report-${{ github.run_number }}
        path: performance-report.md
        retention-days: 30

  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'load' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP Built-in Server
      run: |
        cd public
        php -S localhost:8080 -t . &
        sleep 5
        
    - name: Install Apache Bench
      run: sudo apt-get update && sudo apt-get install -y apache2-utils
      
    - name: Basic load test
      run: |
        echo "# Load Test Results" > load-test-results.md
        echo "Generated on: $(date)" >> load-test-results.md
        echo "" >> load-test-results.md
        
        # Test static file serving
        echo "## Static File Test (100 requests, 10 concurrent)" >> load-test-results.md
        echo "\`\`\`" >> load-test-results.md
        ab -n 100 -c 10 http://localhost:8080/index.php >> load-test-results.md 2>&1 || echo "Load test failed" >> load-test-results.md
        echo "\`\`\`" >> load-test-results.md
        
    - name: Upload load test results
      uses: actions/upload-artifact@v4
      with:
        name: load-test-results-${{ github.run_number }}
        path: load-test-results.md
        retention-days: 7

  accessibility-audit:
    name: Accessibility Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install axe-core CLI
      run: npm install -g @axe-core/cli
      
    - name: Setup PHP Built-in Server
      run: |
        cd public
        php -S localhost:8080 -t . &
        sleep 5
        
    - name: Run accessibility audit
      run: |
        echo "# Accessibility Report" > accessibility-report.md
        echo "Generated on: $(date)" >> accessibility-report.md
        echo "" >> accessibility-report.md
        
        # Test main pages for accessibility
        axe http://localhost:8080/index.php --format=markdown >> accessibility-report.md || echo "Accessibility test failed" >> accessibility-report.md
        
    - name: Upload accessibility report
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-report-${{ github.run_number }}
        path: accessibility-report.md
        retention-days: 30