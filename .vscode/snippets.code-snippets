{
    // PHP Control Structures
    "if": {
        "prefix": ["if"],
        "body": ["<?php if($1): ?>", "\t$2", "<?php endif; ?>"],
        "description": "PHP if statement"
    },
    "if else": {
        "prefix": ["ifelse"],
        "body": [
            "<?php if($1): ?>",
            "\t$2",
            "<?php else: ?>",
            "\t$3",
            "<?php endif; ?>"
        ],
        "description": "PHP if-else statement"
    },
    "foreach": {
        "prefix": "foreach",
        "body": ["<?php foreach($1 as $2): ?>", "  $3", "<?php endforeach; ?>"],
        "description": "PHP foreach loop"
    },
    "for": {
        "prefix": "for",
        "body": ["<?php for($1 = 0; $1 < $2; $1++): ?>", "  $3", "<?php endfor; ?>"],
        "description": "PHP for loop"
    },
    "while": {
        "prefix": "while",
        "body": ["<?php while($1): ?>", "  $2", "<?php endwhile; ?>"],
        "description": "PHP while loop"
    },
    
    // PHP Output
    "echo": {
        "prefix": "=",
        "body": ["<?= $1; ?>"],
        "description": "PHP echo short tag"
    },
    "echo_safe": {
        "prefix": "echosafe",
        "body": ["<?= htmlspecialchars($1, ENT_QUOTES, 'UTF-8'); ?>"],
        "description": "Safe HTML output with escaping"
    },
    "print_r": {
        "prefix": "pr",
        "body": ["<pre><?php print_r($1); ?></pre>"],
        "description": "Debug print_r with HTML formatting"
    },
    "var_dump": {
        "prefix": "vd",
        "body": ["<pre><?php var_dump($1); ?></pre>"],
        "description": "Debug var_dump with HTML formatting"
    },
    
    // Modern PHP Features
    "arrow_function": {
        "prefix": "arrow",
        "body": ["fn($1) => $2"],
        "description": "PHP 7.4+ arrow function"
    },
    "match_expression": {
        "prefix": "match",
        "body": [
            "$1 = match($2) {",
            "\t$3 => $4,",
            "\tdefault => $5",
            "};"
        ],
        "description": "PHP 8.0+ match expression"
    },
    "nullable_type": {
        "prefix": "nullable",
        "body": ["?$1 $2"],
        "description": "Nullable type declaration"
    },
    "union_type": {
        "prefix": "union",
        "body": ["$1|$2 $3"],
        "description": "PHP 8.0+ union type"
    },
    
    // Database Operations
    "pdo_prepare": {
        "prefix": "pdoprepare",
        "body": [
            "$stmt = $$1->prepare(\"$2\");",
            "$stmt->execute([$3]);",
            "$result = $stmt->fetchAll(PDO::FETCH_ASSOC);"
        ],
        "description": "PDO prepared statement"
    },
    "pdo_insert": {
        "prefix": "pdoinsert",
        "body": [
            "$stmt = $$1->prepare(\"INSERT INTO $2 ($3) VALUES ($4)\");",
            "$stmt->execute([$5]);"
        ],
        "description": "PDO insert statement"
    },
    
    // Security
    "csrf_token": {
        "prefix": "csrf",
        "body": ["<input type=\"hidden\" name=\"csrf_token\" value=\"<?= $$1['csrf_token'] ?? '' ?>\" />"],
        "description": "CSRF token input field"
    },
    "password_hash": {
        "prefix": "passhash",
        "body": ["$hashedPassword = password_hash($1, PASSWORD_ARGON2ID);"],
        "description": "Secure password hashing"
    },
    "password_verify": {
        "prefix": "passverify",
        "body": ["if (password_verify($1, $2)) {", "\t$3", "}"],
        "description": "Password verification"
    },
    
    // Form Handling
    "form_input": {
        "prefix": "input",
        "body": [
            "<div class=\"form-group\">",
            "\t<label for=\"$1\">$2</label>",
            "\t<input type=\"$3\" id=\"$1\" name=\"$1\" class=\"form-control\" value=\"<?= htmlspecialchars($$4['$1'] ?? '', ENT_QUOTES) ?>\" />",
            "</div>"
        ],
        "description": "Bootstrap form input with safe output"
    },
    "form_select": {
        "prefix": "select",
        "body": [
            "<div class=\"form-group\">",
            "\t<label for=\"$1\">$2</label>",
            "\t<select id=\"$1\" name=\"$1\" class=\"form-control\">",
            "\t\t<option value=\"\">Selecione...</option>",
            "\t\t<?php foreach($$3 as $key => $value): ?>",
            "\t\t\t<option value=\"<?= $key ?>\" <?= ($$4['$1'] ?? '') == $key ? 'selected' : '' ?>>",
            "\t\t\t\t<?= htmlspecialchars($value) ?>",
            "\t\t\t</option>",
            "\t\t<?php endforeach; ?>",
            "\t</select>",
            "</div>"
        ],
        "description": "Bootstrap form select with safe output"
    },
    
    // Error Handling
    "try_catch": {
        "prefix": "try",
        "body": [
            "try {",
            "\t$1",
            "} catch ($2Exception $e) {",
            "\t$3",
            "}"
        ],
        "description": "Try-catch block"
    },
    "throw_exception": {
        "prefix": "throw",
        "body": ["throw new $1Exception('$2');"],
        "description": "Throw exception"
    },
    
    // Class Templates
    "class_basic": {
        "prefix": "class",
        "body": [
            "<?php",
            "",
            "class $1",
            "{",
            "\tpublic function __construct($2)",
            "\t{",
            "\t\t$3",
            "\t}",
            "",
            "\t$4",
            "}"
        ],
        "description": "Basic PHP class template"
    },
    "method_public": {
        "prefix": "method",
        "body": [
            "public function $1($2): $3",
            "{",
            "\t$4",
            "}"
        ],
        "description": "Public method with return type"
    },
    
    // API Response
    "json_response": {
        "prefix": "json",
        "body": [
            "header('Content-Type: application/json');",
            "echo json_encode([",
            "\t'success' => $1,",
            "\t'data' => $2,",
            "\t'message' => '$3'",
            "]);"
        ],
        "description": "JSON API response"
    },
    
    // Logging
    "log_error": {
        "prefix": "logerror",
        "body": ["error_log('[' . date('Y-m-d H:i:s') . '] $1: ' . $2);"],
        "description": "Simple error logging"
    },
    
    // Session Management
    "session_start_check": {
        "prefix": "session",
        "body": [
            "if (session_status() === PHP_SESSION_NONE) {",
            "\tsession_start();",
            "}"
        ],
        "description": "Safe session start"
    }
}
